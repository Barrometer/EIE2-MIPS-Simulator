/* OPCODE TEST : 

unsigned opcode = test >> 26;

if (opcode == 0) {
	R_type_function;
}

// Edited from if opcode == 1 to 2 or 3 (see first lecture notes)
if (opcode == 2|| opcode == 3) {
	J_type_function;
}

else {
	I_type_function;
}
*/


Then from MAIN


uint32_t registers[32] ={17, 53}; //Instantiate variables for memory
	vector <uint32_t> RAM =(16777216); //we should set its starting size
	vector <uint32_t> ROM; // [4194304]
	
	//do we actually need these? Thinking about it, no
	/*uint32_t write_location =0;
	uint32_t read_location=0;*/
	
	
	uint32_t program_counter; //should initialise to something
	
	if(argc<2){
		cout<<"Missing parameters"<<endl;
		exit(-21);
	}
	
	
	//Get binary
	
	ifstream bin_in;
	
	bin_in.open(argv[1]); //the first parameter will be name / location of bin
	if(!(bin_in.is_open())){ //if not opened then return error
		cout<<"Error, binary not found"<<endl; 
		exit(-21);//error should be this type, I think?
	}
	//Now to read it
	uint32_t a =0; //input holder
	//index starts at 0
	int i = 0;
	while(bin_in>>a){
		
		
		ROM.push_back(a);
		cout << a << endl;
		if(ROM.size()>4194304){//even though vectors are arbitrary in size, should not allow it to grow beyond this
			cout<<"ERRROR, Binary has too many instructions"<<endl;
			exit(-21);
		}
	
	}
	bin_in.close();
	//Dummy holder for main loop
	/* while(running){
		decode(RAM[pcounter]);
		run(decoded instruction)
	}
	*/
	
	cout << "HERE!" << endl;
	cout << ROM.size() << endl;
	for (int j = 0; j<ROM.size(); j++){ //This will need changing
		
		//uint32_t program counter; // Program counter will have value as physical cpu will; code will translate to useful values
		unsigned test = ROM[j];
		unsigned opcode = test >> 26;
		cout << "The value of the opcode :" <<  opcode << endl;
		
		if (opcode == 0) {
			
			unsigned reg1 = registers[((test >> 21) & 0x1f)];
			unsigned reg2 = registers[((test >> 16) & 0x1f)];
			uint32_t dest = ((test >> 11) & 0x1f);
			unsigned shift = ((test >> 6) & 0x1f);
			unsigned function = (test & 0x3f);


			//cout << "The value of the Instruction :" << test << endl;
			
			cout << "The value of the Source1 :" << reg1 << endl;
			cout << "The value of the Source2 :" << reg2 << endl;
			cout << "The value of the dest :" << dest << endl;
			cout << "The value of the shift :" << shift << endl;
			cout << "The value of the function :" << function << endl;

			r_type(reg1,reg2,dest,shift,function);
			
			cout << "The value of the dest :" << dest << endl;
			
			registers[3] = dest;
		}
/*
		if (opcode == 2 || opcode == 3) {
			J_type_function;
			
			// only Jump and Jump Link need to implemented. 
			
			
		}
		else {
			I_type_function;
			
			//Binary breakdown
			unsigned source_register = //right shift by 21, logic AND with hex (2^6)-1 = 0x1F
			unsigned target_register = //right shift by 16, logic AND with hex (2^6)-1 = 0x1f
			immediate_value = //logic AND with hex (2^17)-1 = 0x1FFFF
		}
*/
		
	}


More stuff we removed but Mayank is scared he can't rewrite

/* Cheeky bit of testing for each byte;
	for(int k = 0; k<i; k++){
		printf ("0x%X\n", set[k]);
	}
	*/
	
	//cerr << "The value of i" << i <<endl;
	int no_inputs = i/4;
	/* - The testing into a test file
	int32_t byte1 = 0,byte2 = 0 ,byte3 = 0,byte4 = 0,total = 0;

	cerr<<"TEST OPERATION, DUMP ROM as bytes"<<endl;
	ofstream ROM_DUMP;
	ROM_DUMP.open("ROM_DUMP.txt");
	// new indexer
	for(uint32_t c =0; c<i;c++){
		
		cerr << "Outputting the value in a byte" << ROM[c] << endl;
		ROM_DUMP<<ROM[c]<<endl;
	}
	ROM_DUMP.close();
	cerr<<"TEST OPERATION, DUMP ROM as words"<<endl;
	ofstream ROM_DUMPw;
	ROM_DUMPw.open("ROM_DUMPw.txt");
	
	cerr << "Loop 2 Entered" << endl;
	
	for (int j =0; j <no_inputs; j++){ 
	
	// The process from combining the 4 char files into one single 32 bit number;
	// The process of combining the bytes into a word;
	
	byte1 = ROM[(4*j)] << 24;
	byte2 = ROM[1 + (4*j)] << 16;
	byte3 = ROM[2 + (4*j)] << 8;
	byte4 = ROM[3 + (4*j)];
	total = (byte1 | byte2 | byte3 | byte4);
	cerr << "Value of the Data Stored: " << total << endl;
	ROM_DUMPw << total << " " <<endl;
	//instruction_set.push_back(total);
	byte1 = 0;byte2 = 0;byte3 = 0;byte4 = 0;total = 0;
	
	}
	
	*/	